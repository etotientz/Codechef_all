#include<stdio.h>
#include<math.h>
 
 
void mergeSort(long long int arr[],long long int low,long long int mid,long long int high);
 
void partition(long long int arr[],long long int low,long long int high){
 
    long long int mid;
 
    if(low < high)
    {
         mid=(low+high)/2;
         partition(arr,low,mid);
         partition(arr,mid+1,high);
         mergeSort(arr,low,mid,high);
    }
}
 
void mergeSort(long long int arr[],long long int low,long long int mid,long long int high)
{
 
    long long int i, m, k, l; 
    long long int temp[high];
 
    l = low;
    i = low;
    m = mid+1;
 
    while((l <= mid) && (m <= high))
    {
         if(arr[l] <= arr[m])
	 {
             temp[i] = arr[l];
             l++;
         }
         else
	 {
             temp[i] = arr[m];
             m++;
         }
         i++;
    }
 
    if(l > mid)
    {
         for(k = m; k <= high; k++)
	 {
             temp[i] = arr[k];
             i++;
         }
    }
    else
    {
         for(k = l; k <= mid; k++)
	 {
             temp[i] = arr[k];
             i++;
         }
    }
   
    for(k = low; k <= high; k++)
    {
         arr[k] = temp[k];
    }
}
 
 
 
 
 
 
 
 
 
 
 
 
long long int power(long long int base, long long int exp, long long int mod)
{
	long long int tmp;
	long long int t1; 
	long long int t2;
	if(exp == 0){
		return 1;
	}
	else if(exp == 1){
		t2 = base % mod;
		return t2;
	}
	else{
		if(exp % 2 == 0){
			tmp = power(base, exp/2, mod);
			t1 = pow(tmp,2);
			return t1%mod;
		}
		else{
			tmp = power(base, exp-1, mod);
			return (base*tmp)%mod;
		}
	}
}
 
long long int mod_cal(long long int val, long long int exp, long long int mod){
	long long int tmp = power(2,exp,mod);
	//tmp 
	long long int new = val*tmp;
	return new % mod;
}
 
int main(){
	long long int mod = 1000000007;
	long long int test;
	long long int setdiff = 0;
	long long int n,i,j;
	long long int tmp;
 
 
	scanf("%lld",&test);
	while(test-- != 0){
		scanf("%lld",&n);
		long long int set[n];
		for(i=0;i<n;i++)
		{
			scanf("%lld",&set[i]);;
 
		}
 
		partition(set,0,i-1);
		/*for(i=0;i<N;i++)
		{
			printf("%lld\n",quality[i]);;
			//quality[i]=val;
		}*/
		for(j=0; j<i; j++){
 
			tmp=set[j];
			setdiff = (setdiff + mod_cal(tmp, j, mod)) % mod;
			setdiff = (setdiff - mod_cal(tmp, n - j - 1, mod) + mod) % mod;
		}
		printf("%lld\n",setdiff);
		setdiff = 0;
		//memset(quality,0,100);
	}
	return 0;
}